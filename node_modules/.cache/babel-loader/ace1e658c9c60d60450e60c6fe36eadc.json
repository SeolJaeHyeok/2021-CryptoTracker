{"ast":null,"code":"var _jsxFileName = \"/Users/seoljaehyeok/2021-cryptotracker/src/routes/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = _ref => {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId), {\n    refetchInterval: 10000\n  });\n  const isDark = useRecoilValue(isDarkAtom);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading Chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Close\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.close)\n      }, {\n        name: \"Open\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.open)\n      }, {\n        name: \"high\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.high)\n      }, {\n        name: \"low\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.low)\n      }],\n      options: {\n        theme: {\n          mode: isDark ? \"dark\" : \"light\"\n        },\n        chart: {\n          width: 500,\n          height: 500,\n          background: \"transparent\"\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 3\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          type: \"datetime\",\n          labels: {\n            show: false\n          },\n          categories: data === null || data === void 0 ? void 0 : data.map(price => price.time_close)\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"blue\"]\n          }\n        },\n        tooltip: {\n          y: {\n            formatter: value => value.toFixed(3)\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chart, \"yCLOh2/uuHa5iNeWPI3LROe6ufc=\", false, function () {\n  return [useQuery, useRecoilValue];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/seoljaehyeok/2021-cryptotracker/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ApexChart","useRecoilValue","isDarkAtom","Chart","coinId","isLoading","data","refetchInterval","isDark","name","map","price","close","open","high","low","theme","mode","chart","width","height","background","stroke","curve","yaxis","show","xaxis","type","labels","categories","time_close","fill","gradient","gradientToColors","tooltip","y","formatter","value","toFixed"],"mappings":"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","sourcesContent":["import { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"../atoms\";\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\n\nconst Chart = ({ coinId }: ChartProps) => {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    }\n  );\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading Chart...\"\n      ) : (\n        <ApexChart\n          type=\"line\"\n          series={[\n            {\n              name: \"Close\",\n              data: data?.map((price) => price.close),\n            },\n            {\n              name: \"Open\",\n              data: data?.map((price) => price.open),\n            },\n            {\n              name: \"high\",\n              data: data?.map((price) => price.high),\n            },\n            {\n              name: \"low\",\n              data: data?.map((price) => price.low),\n            },\n          ]}\n          options={{\n            theme: { mode: isDark ? \"dark\" : \"light\" },\n            chart: { width: 500, height: 500, background: \"transparent\" },\n            stroke: { curve: \"smooth\", width: 3 },\n            yaxis: { show: false },\n            xaxis: {\n              type: \"datetime\",\n              labels: { show: false },\n              categories: data?.map((price) => price.time_close),\n            },\n            fill: {\n              type: \"gradient\",\n              gradient: { gradientToColors: [\"blue\"] },\n            },\n            tooltip: {\n              y: {\n                formatter: (value) => value.toFixed(3),\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}